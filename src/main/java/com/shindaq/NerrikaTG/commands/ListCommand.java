package com.shindaq.NerrikaTG.commands;

import com.shindaq.NerrikaTG.utils.PlayerUtils;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerPlayer;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

public class ListCommand {
    
    private static final Map<String, CachedListResult> listCache = new ConcurrentHashMap<>();
    private static final long CACHE_DURATION = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –∫—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    private static class CachedListResult {
        final String result;
        final long timestamp;
        final int playerCount;
        
        CachedListResult(String result, int playerCount) {
            this.result = result;
            this.timestamp = System.currentTimeMillis();
            this.playerCount = playerCount;
        }
        
        boolean isValid(int currentPlayerCount) {
            // –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            return System.currentTimeMillis() - timestamp < CACHE_DURATION && 
                   this.playerCount == currentPlayerCount;
        }
    }
    
    public static String execute(MinecraftServer server) {
        if (server == null) {
            return "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        }

        List<ServerPlayer> players = PlayerUtils.getAllPlayers(server);
        int playerCount = players.size();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        String cacheKey = "list_" + playerCount;
        CachedListResult cached = listCache.get(cacheKey);
        if (cached != null && cached.isValid(playerCount)) {
            return cached.result;
        }
        
        if (players.isEmpty()) {
            String result = "üü¢ –û–Ω–ª–∞–π–Ω: 0 –∏–∑ " + PlayerUtils.getMaxPlayers(server) + "\nüìÉ –ò–≥—Ä–æ–∫–∏: –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤";
            listCache.put(cacheKey, new CachedListResult(result, playerCount));
            return result;
        }

        StringBuilder response = new StringBuilder();
        response.append("üü¢ –û–Ω–ª–∞–π–Ω: ").append(playerCount).append(" –∏–∑ ").append(PlayerUtils.getMaxPlayers(server)).append("\n");
        response.append("üìÉ –ò–≥—Ä–æ–∫–∏: ");
        
        for (int i = 0; i < players.size(); i++) {
            String playerName = PlayerUtils.getSafePlayerName(players.get(i));
            response.append(playerName);
            if (i < players.size() - 1) {
                response.append(", ");
            }
        }

        String result = response.toString();
        listCache.put(cacheKey, new CachedListResult(result, playerCount));
        return result;
    }
    
    public static void cleanupCache() {
        long currentTime = System.currentTimeMillis();
        listCache.entrySet().removeIf(entry -> 
            currentTime - entry.getValue().timestamp > CACHE_DURATION * 10);
    }
} 
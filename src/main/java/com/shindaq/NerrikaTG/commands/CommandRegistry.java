package com.shindaq.NerrikaTG.commands;

import com.mojang.logging.LogUtils;
import net.minecraft.server.MinecraftServer;
import org.slf4j.Logger;

import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;
import java.util.function.Function;

/**
 * –†–µ–µ—Å—Ç—Ä –∫–æ–º–∞–Ω–¥ –ø–æ –æ–±—Ä–∞–∑—Ü—É tgbridge
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
 */
public class CommandRegistry {
    private static final Logger LOGGER = LogUtils.getLogger();
    private static final Map<String, Function<MinecraftServer, String>> commands = new ConcurrentHashMap<>();
    
    static {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        registerCommand("list", ListCommand::execute);
        registerCommand("status", StatusCommand::execute);
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
     */
    public static void registerCommand(String commandName, Function<MinecraftServer, String> handler) {
        commands.put("/" + commandName.toLowerCase(), handler);
        LOGGER.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /{}", commandName);
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É
     */
    public static String executeCommand(String command, MinecraftServer server) {
        String commandName = command.toLowerCase().split("\\s+")[0];
        Function<MinecraftServer, String> handler = commands.get(commandName);
        
        if (handler != null) {
            try {
                return handler.apply(server);
            } catch (Exception e) {
                LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {}: {}", commandName, e.getMessage());
                return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã";
            }
        }
        
        return null; // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π
     */
    public static boolean isCommand(String text) {
        if (text == null || !text.startsWith("/")) {
            return false;
        }
        
        String commandName = text.toLowerCase().split("\\s+")[0];
        return commands.containsKey(commandName);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
     */
    public static String getAvailableCommands() {
        StringBuilder sb = new StringBuilder("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n");
        commands.keySet().forEach(cmd -> sb.append("‚Ä¢ ").append(cmd).append("\n"));
        return sb.toString();
    }
}